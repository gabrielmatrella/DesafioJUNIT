Gabriel Busatto Matrella - RM80387

public class JulgamentoPrisioneiroTeste {
	
	@Test
	public void testeCalculoPenaInocencia() {
		Resposta respostaPrisioneiroA = Resposta.DELACAO;
		Resposta respostaPrisoneiroB = Resposta.SEM_DELACAO;
		
		JulgamentoPrisioneiro julgamentoPrisioneiro = new JulgamentoPrisioneiro();
		int penaCalculada = julgamentoPrisioneiro.calculaPena(respostaPrisioneiroA, respostaPrisoneiroB);
		
		assertEquals(10, penaCalculada);
	}
	
	
}

1 -> Teste executado com erro: java.lang.Error: Unresolved compilation problems: 
	Resposta cannot be resolved to a type
	Resposta cannot be resolved to a variable
	Resposta cannot be resolved to a type
	Resposta cannot be resolved to a variable
	
	at JulgamentoPrisioneiroTeste.testeCalculoPenaInocencia(JulgamentoPrisioneiroTeste.java:9)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:542)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:770)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:464)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
	
2 -> 
	2.2 -> Adicionado um enum de Resposta que estava faltando e por isso o erro do primeiro teste foi causado.
		   
		   public enum Resposta {
		   		DELACAO, SEM_DELACAO
		   }

3 -> Implementado todos metodos de teste

public class JulgamentoPrisioneiroTeste {
	
	private JulgamentoPrisioneiro julgamentoPrisioneiro;

	@Before
	public void init() {
		julgamentoPrisioneiro = new JulgamentoPrisioneiro();
	}
	
	@Test
	public void testeCalculoPenaInocencia() {
		int penaInocenciaCorreto = 0;
		
		int penaCalculada = julgamentoPrisioneiro.calculaPena(Resposta.SEM_DELACAO, Resposta.SEM_DELACAO);
		assertEquals(penaInocenciaCorreto, penaCalculada);
	}
	
	@Test
	public void testeCalculoPenaCondenacaoMutua() {
		int penaCondenacaoMutuaCorreto = 5;
		
		int penaCalculada = julgamentoPrisioneiro.calculaPena(Resposta.DELACAO, Resposta.DELACAO);
		assertEquals(penaCondenacaoMutuaCorreto, penaCalculada);
	}
	
	@Test
	public void testeCalculoPenaCondenacaoIndividual() {
		int penaCondenacaoIndividualCorreto = 10;
		
		int penaCalculada = julgamentoPrisioneiro.calculaPena(Resposta.DELACAO, Resposta.SEM_DELACAO);
		assertEquals(penaCondenacaoIndividualCorreto, penaCalculada);
	}
	
	@Test
	public void testeCalculoPenaCondenacaoCumplices() {
		int penaCondenacaoCumplicesCorreto = 1;
		
		int penaCalculada = julgamentoPrisioneiro.calculaPena(Resposta.SEM_DELACAO, Resposta.DELACAO);
		assertEquals(penaCondenacaoCumplicesCorreto, penaCalculada);
	}
}

4 -> Executado metodos de teste com erro, as variaveis preenchidas pelo programados em java estao 
	 com valores de pena incorretos.

	JulgamentoPrisioneiroTeste
	testeCalculoPenaCondenacaoMutua(JulgamentoPrisioneiroTeste)
	java.lang.AssertionError: expected:<5> but was:<15>
	
	testeCalculoPenaCondenacaoCumplices(JulgamentoPrisioneiroTeste)
	java.lang.AssertionError: expected:<1> but was:<10>
	
	testeCalculoPenaCondenacaoIndividual(JulgamentoPrisioneiroTeste)
	java.lang.AssertionError: expected:<10> but was:<13>
	
	testeCalculoPenaInocencia(JulgamentoPrisioneiroTeste)
	java.lang.AssertionError: expected:<0> but was:<11>
	
5 -> Corrigido valores nas variaveis de pena
	
	private static int PENA_INOCENCIA = 0;
	
	private static int PENA_CONDENACAO_MUTUA = 5;
	
	private static int PENA_CONDENACAO_INDIVIDUAL = 10;
	
	private static int PENA_CONDENACAO_CUMPLICES = 1;



	



